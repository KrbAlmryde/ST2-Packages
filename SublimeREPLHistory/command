-(defn square [x]
-(* x x)
-)
-(square 5)
-(defn double-string [x])
-(defn double-string [x] (repeat x))
-(repeat "hello")
-(repeat "hello" 2)
-(javadoc repeat)
-(doc repeat)
-(repeat 2 "hello")
-(concat (repeat 2 "hello"))
-(System/getProperty "user.dir")
-(= true true)
-(print "Problem 001")
-(println "Problem 001")
-(str-println "Problem 001")
-print "hello world"
-(= (list :a :b :c) '(:a :b :c))
-(= ("hellohello") (conj ("hello" "hello")))
-(= '("hellohello") (conj ("hello" "hello")))
-(conj [2 3 4] 1)
-(list 1 2 4 5)
-(= [:a :b :c] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))
-(= [1 2 3 4] (conj [1 2] 3 4))
-(set '(:a :a :b :c :c :c :c :d :d))
-(= #{1 2 3 4} (conj #{1 4 3} 2))
-(= 20 ((hash-map :a 10, :b 20, :c 30) :b))
-(= {:a 1, :b 2, :c 3} (conj {:a 1} {:b 2} [:c 3]))
-(= [20 30 40] (rest [10 20 30 40]))
-(= 8 ((fn add-five [x] (+ x 5)) 3))\n(= 8 ((fn [x] (+ x 5)) 3))\n(= 8 (#(+ % 5) 3))\n(= 8 ((partial + 5) 3))
-(= ((fn [x] (* x 2)) 2) 4)\n(= ((fn [x] (* x 2)) 3) 6)\n(= ((fn [x] (* x 2)) 11) 22)\n(= ((fn [x] (* x 2)) 7) 14)
-(= ((fn [x] (format "Hello, %s!" x)) "Dave") "Hello, Dave!")\n(= ((fn [x] (format "Hello, %s!" x)) "Jenn") "Hello, Jenn!")\n(= ((fn [x] (format "Hello, %s!" x)) "Jenn") "Hello, Jenn!")
-(= ((fn [n] (str "Hello, " n "!")) "Jenn") "Hello, Jenn!")
-(= (#(str "Hello, " % "!") "Jenn") "Hello, Jenn!")
-(= [6 7 8] (map #(+ % 5) '(1 2 3)))
-(= ((fn [xs] (last xs)) [1 2 3 4 5]) 5)
-(map #(println %) [1 2 3])
-(doc alength)
-(alength [1 2 3 4 5])
-(alength (list 1 2 3 4 5))
-(source last)
-(*print-length* [1 2 3])
-(doc *print-length*)
-(= ((fn [xs] (peek xs)) [1 2 3 4 5]) 5)
-((fn [xs] (peek xs)) [1 2 3 4 5])
-((fn [xs] (nth 4)) [1 2 3 4 5])
-((fn [xs] (nth xs 4)) [1 2 3 4 5])
-((fn [xs] (take-last 1 xs)) [1 2 3 4 5])
-((fn [xs] (let x (take-last 1 xs)) x) [1 2 3 4 5])
-((fn [xs] (let x (take-last 1 xs))) [1 2 3 4 5])
-(- (count [1 2 3 4 5]) 1)
-((fn [xs] first (drop (- (count xs) 1) xs))) [1 2 3 4 5])
-((fn [xs] first (drop (- (count xs) 1) xs)) [1 2 3 4 5])
-((fn [xs] first (drop (dec (count xs)) xs)) [1 2 3 4 5])
-((fn [xs] (comp first reverse xs)) [1 2 3 4 5])
-(defn not-last [xs] (comp first reverse xs))
-(not-last [1 2 3 4 5])
-(print (not-last [1 2 3 4 5]))
-((fn [xs] (nth (dec (count xs)) xs)) [1 2 3 4 5])
-((defn tail [[n & more]] (if more (recur more) n)) [1 2 3 4 5])
-(fn [x] (first (reverse x))) [1 2 3 4 5])
-((fn [x] (first (reverse x))) [1 2 3 4 5])
-(= ((fn [x] (nth x (dec (count x)))) ["b" "c" "d"]) "d")
-(= ((fn [x] (second (reverse x))) (list 1 2 3 4 5)) 4)
-print "hello"
-print??
-print?
-cpaste
-%cpaste
